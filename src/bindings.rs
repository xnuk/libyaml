/* automatically generated by rust-bindgen 0.59.2 */

pub type size_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
	_unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
	pub _flags: ::std::os::raw::c_int,
	pub _IO_read_ptr: *mut ::std::os::raw::c_char,
	pub _IO_read_end: *mut ::std::os::raw::c_char,
	pub _IO_read_base: *mut ::std::os::raw::c_char,
	pub _IO_write_base: *mut ::std::os::raw::c_char,
	pub _IO_write_ptr: *mut ::std::os::raw::c_char,
	pub _IO_write_end: *mut ::std::os::raw::c_char,
	pub _IO_buf_base: *mut ::std::os::raw::c_char,
	pub _IO_buf_end: *mut ::std::os::raw::c_char,
	pub _IO_save_base: *mut ::std::os::raw::c_char,
	pub _IO_backup_base: *mut ::std::os::raw::c_char,
	pub _IO_save_end: *mut ::std::os::raw::c_char,
	pub _markers: *mut _IO_marker,
	pub _chain: *mut _IO_FILE,
	pub _fileno: ::std::os::raw::c_int,
	pub _flags2: ::std::os::raw::c_int,
	pub _old_offset: __off_t,
	pub _cur_column: ::std::os::raw::c_ushort,
	pub _vtable_offset: ::std::os::raw::c_schar,
	pub _shortbuf: [::std::os::raw::c_char; 1usize],
	pub _lock: *mut _IO_lock_t,
	pub _offset: __off64_t,
	pub _codecvt: *mut _IO_codecvt,
	pub _wide_data: *mut _IO_wide_data,
	pub _freeres_list: *mut _IO_FILE,
	pub _freeres_buf: *mut ::std::os::raw::c_void,
	pub __pad5: size_t,
	pub _mode: ::std::os::raw::c_int,
	pub _unused2: [::std::os::raw::c_char; 20usize],
}
pub type yaml_char_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_version_directive_s {
	pub major: ::std::os::raw::c_int,
	pub minor: ::std::os::raw::c_int,
}
pub type yaml_version_directive_t = yaml_version_directive_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_tag_directive_s {
	pub handle: *mut yaml_char_t,
	pub prefix: *mut yaml_char_t,
}
pub type yaml_tag_directive_t = yaml_tag_directive_s;
pub mod yaml_encoding_e {
	pub type Type = ::std::os::raw::c_uint;
	pub const YAML_ANY_ENCODING: Type = 0;
	pub const YAML_UTF8_ENCODING: Type = 1;
	pub const YAML_UTF16LE_ENCODING: Type = 2;
	pub const YAML_UTF16BE_ENCODING: Type = 3;
}
pub use self::yaml_encoding_e::Type as yaml_encoding_t;
pub mod yaml_error_type_e {
	pub type Type = ::std::os::raw::c_uint;
	pub const YAML_NO_ERROR: Type = 0;
	pub const YAML_MEMORY_ERROR: Type = 1;
	pub const YAML_READER_ERROR: Type = 2;
	pub const YAML_SCANNER_ERROR: Type = 3;
	pub const YAML_PARSER_ERROR: Type = 4;
	pub const YAML_COMPOSER_ERROR: Type = 5;
	pub const YAML_WRITER_ERROR: Type = 6;
	pub const YAML_EMITTER_ERROR: Type = 7;
}
pub use self::yaml_error_type_e::Type as yaml_error_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_mark_s {
	pub index: size_t,
	pub line: size_t,
	pub column: size_t,
}
pub type yaml_mark_t = yaml_mark_s;
pub mod yaml_scalar_style_e {
	pub type Type = ::std::os::raw::c_uint;
	pub const YAML_ANY_SCALAR_STYLE: Type = 0;
	pub const YAML_PLAIN_SCALAR_STYLE: Type = 1;
	pub const YAML_SINGLE_QUOTED_SCALAR_STYLE: Type = 2;
	pub const YAML_DOUBLE_QUOTED_SCALAR_STYLE: Type = 3;
	pub const YAML_LITERAL_SCALAR_STYLE: Type = 4;
	pub const YAML_FOLDED_SCALAR_STYLE: Type = 5;
}
pub use self::yaml_scalar_style_e::Type as yaml_scalar_style_t;
pub mod yaml_sequence_style_e {
	pub type Type = ::std::os::raw::c_uint;
	pub const YAML_ANY_SEQUENCE_STYLE: Type = 0;
	pub const YAML_BLOCK_SEQUENCE_STYLE: Type = 1;
	pub const YAML_FLOW_SEQUENCE_STYLE: Type = 2;
}
pub use self::yaml_sequence_style_e::Type as yaml_sequence_style_t;
pub mod yaml_mapping_style_e {
	pub type Type = ::std::os::raw::c_uint;
	pub const YAML_ANY_MAPPING_STYLE: Type = 0;
	pub const YAML_BLOCK_MAPPING_STYLE: Type = 1;
	pub const YAML_FLOW_MAPPING_STYLE: Type = 2;
}
pub use self::yaml_mapping_style_e::Type as yaml_mapping_style_t;
pub mod yaml_token_type_e {
	pub type Type = ::std::os::raw::c_uint;
	pub const YAML_NO_TOKEN: Type = 0;
	pub const YAML_STREAM_START_TOKEN: Type = 1;
	pub const YAML_STREAM_END_TOKEN: Type = 2;
	pub const YAML_VERSION_DIRECTIVE_TOKEN: Type = 3;
	pub const YAML_TAG_DIRECTIVE_TOKEN: Type = 4;
	pub const YAML_DOCUMENT_START_TOKEN: Type = 5;
	pub const YAML_DOCUMENT_END_TOKEN: Type = 6;
	pub const YAML_BLOCK_SEQUENCE_START_TOKEN: Type = 7;
	pub const YAML_BLOCK_MAPPING_START_TOKEN: Type = 8;
	pub const YAML_BLOCK_END_TOKEN: Type = 9;
	pub const YAML_FLOW_SEQUENCE_START_TOKEN: Type = 10;
	pub const YAML_FLOW_SEQUENCE_END_TOKEN: Type = 11;
	pub const YAML_FLOW_MAPPING_START_TOKEN: Type = 12;
	pub const YAML_FLOW_MAPPING_END_TOKEN: Type = 13;
	pub const YAML_BLOCK_ENTRY_TOKEN: Type = 14;
	pub const YAML_FLOW_ENTRY_TOKEN: Type = 15;
	pub const YAML_KEY_TOKEN: Type = 16;
	pub const YAML_VALUE_TOKEN: Type = 17;
	pub const YAML_ALIAS_TOKEN: Type = 18;
	pub const YAML_ANCHOR_TOKEN: Type = 19;
	pub const YAML_TAG_TOKEN: Type = 20;
	pub const YAML_SCALAR_TOKEN: Type = 21;
}
pub use self::yaml_token_type_e::Type as yaml_token_type_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct yaml_token_s {
	pub type_: yaml_token_type_t,
	pub data: yaml_token_s__bindgen_ty_1,
	pub start_mark: yaml_mark_t,
	pub end_mark: yaml_mark_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union yaml_token_s__bindgen_ty_1 {
	pub stream_start: yaml_token_s__bindgen_ty_1__bindgen_ty_1,
	pub alias: yaml_token_s__bindgen_ty_1__bindgen_ty_2,
	pub anchor: yaml_token_s__bindgen_ty_1__bindgen_ty_3,
	pub tag: yaml_token_s__bindgen_ty_1__bindgen_ty_4,
	pub scalar: yaml_token_s__bindgen_ty_1__bindgen_ty_5,
	pub version_directive: yaml_token_s__bindgen_ty_1__bindgen_ty_6,
	pub tag_directive: yaml_token_s__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_1 {
	pub encoding: yaml_encoding_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_2 {
	pub value: *mut yaml_char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_3 {
	pub value: *mut yaml_char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_4 {
	pub handle: *mut yaml_char_t,
	pub suffix: *mut yaml_char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_5 {
	pub value: *mut yaml_char_t,
	pub length: size_t,
	pub style: yaml_scalar_style_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_6 {
	pub major: ::std::os::raw::c_int,
	pub minor: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_token_s__bindgen_ty_1__bindgen_ty_7 {
	pub handle: *mut yaml_char_t,
	pub prefix: *mut yaml_char_t,
}
pub type yaml_token_t = yaml_token_s;
pub mod yaml_event_type_e {
	pub type Type = ::std::os::raw::c_uint;
	pub const YAML_NO_EVENT: Type = 0;
	pub const YAML_STREAM_START_EVENT: Type = 1;
	pub const YAML_STREAM_END_EVENT: Type = 2;
	pub const YAML_DOCUMENT_START_EVENT: Type = 3;
	pub const YAML_DOCUMENT_END_EVENT: Type = 4;
	pub const YAML_ALIAS_EVENT: Type = 5;
	pub const YAML_SCALAR_EVENT: Type = 6;
	pub const YAML_SEQUENCE_START_EVENT: Type = 7;
	pub const YAML_SEQUENCE_END_EVENT: Type = 8;
	pub const YAML_MAPPING_START_EVENT: Type = 9;
	pub const YAML_MAPPING_END_EVENT: Type = 10;
}
pub use self::yaml_event_type_e::Type as yaml_event_type_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct yaml_event_s {
	pub type_: yaml_event_type_t,
	pub data: yaml_event_s__bindgen_ty_1,
	pub start_mark: yaml_mark_t,
	pub end_mark: yaml_mark_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union yaml_event_s__bindgen_ty_1 {
	pub stream_start: yaml_event_s__bindgen_ty_1__bindgen_ty_1,
	pub document_start: yaml_event_s__bindgen_ty_1__bindgen_ty_2,
	pub document_end: yaml_event_s__bindgen_ty_1__bindgen_ty_3,
	pub alias: yaml_event_s__bindgen_ty_1__bindgen_ty_4,
	pub scalar: yaml_event_s__bindgen_ty_1__bindgen_ty_5,
	pub sequence_start: yaml_event_s__bindgen_ty_1__bindgen_ty_6,
	pub mapping_start: yaml_event_s__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_1 {
	pub encoding: yaml_encoding_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_2 {
	pub version_directive: *mut yaml_version_directive_t,
	pub tag_directives: yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
	pub implicit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
	pub start: *mut yaml_tag_directive_t,
	pub end: *mut yaml_tag_directive_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_3 {
	pub implicit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_4 {
	pub anchor: *mut yaml_char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_5 {
	pub anchor: *mut yaml_char_t,
	pub tag: *mut yaml_char_t,
	pub value: *mut yaml_char_t,
	pub length: size_t,
	pub plain_implicit: ::std::os::raw::c_int,
	pub quoted_implicit: ::std::os::raw::c_int,
	pub style: yaml_scalar_style_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_6 {
	pub anchor: *mut yaml_char_t,
	pub tag: *mut yaml_char_t,
	pub implicit: ::std::os::raw::c_int,
	pub style: yaml_sequence_style_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_event_s__bindgen_ty_1__bindgen_ty_7 {
	pub anchor: *mut yaml_char_t,
	pub tag: *mut yaml_char_t,
	pub implicit: ::std::os::raw::c_int,
	pub style: yaml_mapping_style_t,
}
pub type yaml_event_t = yaml_event_s;
extern "C" {
	pub fn yaml_event_delete(event: *mut yaml_event_t);
}
pub mod yaml_node_type_e {
	pub type Type = ::std::os::raw::c_uint;
	pub const YAML_NO_NODE: Type = 0;
	pub const YAML_SCALAR_NODE: Type = 1;
	pub const YAML_SEQUENCE_NODE: Type = 2;
	pub const YAML_MAPPING_NODE: Type = 3;
}
pub use self::yaml_node_type_e::Type as yaml_node_type_t;
pub type yaml_node_t = yaml_node_s;
pub type yaml_node_item_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_pair_s {
	pub key: ::std::os::raw::c_int,
	pub value: ::std::os::raw::c_int,
}
pub type yaml_node_pair_t = yaml_node_pair_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct yaml_node_s {
	pub type_: yaml_node_type_t,
	pub tag: *mut yaml_char_t,
	pub data: yaml_node_s__bindgen_ty_1,
	pub start_mark: yaml_mark_t,
	pub end_mark: yaml_mark_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union yaml_node_s__bindgen_ty_1 {
	pub scalar: yaml_node_s__bindgen_ty_1__bindgen_ty_1,
	pub sequence: yaml_node_s__bindgen_ty_1__bindgen_ty_2,
	pub mapping: yaml_node_s__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_1 {
	pub value: *mut yaml_char_t,
	pub length: size_t,
	pub style: yaml_scalar_style_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_2 {
	pub items: yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
	pub style: yaml_sequence_style_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
	pub start: *mut yaml_node_item_t,
	pub end: *mut yaml_node_item_t,
	pub top: *mut yaml_node_item_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_3 {
	pub pairs: yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
	pub style: yaml_mapping_style_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_node_s__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1 {
	pub start: *mut yaml_node_pair_t,
	pub end: *mut yaml_node_pair_t,
	pub top: *mut yaml_node_pair_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_document_s {
	pub nodes: yaml_document_s__bindgen_ty_1,
	pub version_directive: *mut yaml_version_directive_t,
	pub tag_directives: yaml_document_s__bindgen_ty_2,
	pub start_implicit: ::std::os::raw::c_int,
	pub end_implicit: ::std::os::raw::c_int,
	pub start_mark: yaml_mark_t,
	pub end_mark: yaml_mark_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_document_s__bindgen_ty_1 {
	pub start: *mut yaml_node_t,
	pub end: *mut yaml_node_t,
	pub top: *mut yaml_node_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_document_s__bindgen_ty_2 {
	pub start: *mut yaml_tag_directive_t,
	pub end: *mut yaml_tag_directive_t,
}
pub type yaml_document_t = yaml_document_s;
pub type yaml_read_handler_t = ::std::option::Option<
	unsafe extern "C" fn(
		data: *mut ::std::os::raw::c_void,
		buffer: *mut ::std::os::raw::c_uchar,
		size: size_t,
		size_read: *mut size_t,
	) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_simple_key_s {
	pub possible: ::std::os::raw::c_int,
	pub required: ::std::os::raw::c_int,
	pub token_number: size_t,
	pub mark: yaml_mark_t,
}
pub type yaml_simple_key_t = yaml_simple_key_s;
pub mod yaml_parser_state_e {
	pub type Type = ::std::os::raw::c_uint;
	pub const YAML_PARSE_STREAM_START_STATE: Type = 0;
	pub const YAML_PARSE_IMPLICIT_DOCUMENT_START_STATE: Type = 1;
	pub const YAML_PARSE_DOCUMENT_START_STATE: Type = 2;
	pub const YAML_PARSE_DOCUMENT_CONTENT_STATE: Type = 3;
	pub const YAML_PARSE_DOCUMENT_END_STATE: Type = 4;
	pub const YAML_PARSE_BLOCK_NODE_STATE: Type = 5;
	pub const YAML_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE: Type = 6;
	pub const YAML_PARSE_FLOW_NODE_STATE: Type = 7;
	pub const YAML_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE: Type = 8;
	pub const YAML_PARSE_BLOCK_SEQUENCE_ENTRY_STATE: Type = 9;
	pub const YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE: Type = 10;
	pub const YAML_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE: Type = 11;
	pub const YAML_PARSE_BLOCK_MAPPING_KEY_STATE: Type = 12;
	pub const YAML_PARSE_BLOCK_MAPPING_VALUE_STATE: Type = 13;
	pub const YAML_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE: Type = 14;
	pub const YAML_PARSE_FLOW_SEQUENCE_ENTRY_STATE: Type = 15;
	pub const YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE: Type = 16;
	pub const YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE: Type = 17;
	pub const YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE: Type = 18;
	pub const YAML_PARSE_FLOW_MAPPING_FIRST_KEY_STATE: Type = 19;
	pub const YAML_PARSE_FLOW_MAPPING_KEY_STATE: Type = 20;
	pub const YAML_PARSE_FLOW_MAPPING_VALUE_STATE: Type = 21;
	pub const YAML_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE: Type = 22;
	pub const YAML_PARSE_END_STATE: Type = 23;
}
pub use self::yaml_parser_state_e::Type as yaml_parser_state_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_alias_data_s {
	pub anchor: *mut yaml_char_t,
	pub index: ::std::os::raw::c_int,
	pub mark: yaml_mark_t,
}
pub type yaml_alias_data_t = yaml_alias_data_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct yaml_parser_s {
	pub error: yaml_error_type_t,
	pub problem: *const ::std::os::raw::c_char,
	pub problem_offset: size_t,
	pub problem_value: ::std::os::raw::c_int,
	pub problem_mark: yaml_mark_t,
	pub context: *const ::std::os::raw::c_char,
	pub context_mark: yaml_mark_t,
	pub read_handler: yaml_read_handler_t,
	pub read_handler_data: *mut ::std::os::raw::c_void,
	pub input: yaml_parser_s__bindgen_ty_1,
	pub eof: ::std::os::raw::c_int,
	pub buffer: yaml_parser_s__bindgen_ty_2,
	pub unread: size_t,
	pub raw_buffer: yaml_parser_s__bindgen_ty_3,
	pub encoding: yaml_encoding_t,
	pub offset: size_t,
	pub mark: yaml_mark_t,
	pub stream_start_produced: ::std::os::raw::c_int,
	pub stream_end_produced: ::std::os::raw::c_int,
	pub flow_level: ::std::os::raw::c_int,
	pub tokens: yaml_parser_s__bindgen_ty_4,
	pub tokens_parsed: size_t,
	pub token_available: ::std::os::raw::c_int,
	pub indents: yaml_parser_s__bindgen_ty_5,
	pub indent: ::std::os::raw::c_int,
	pub simple_key_allowed: ::std::os::raw::c_int,
	pub simple_keys: yaml_parser_s__bindgen_ty_6,
	pub states: yaml_parser_s__bindgen_ty_7,
	pub state: yaml_parser_state_t,
	pub marks: yaml_parser_s__bindgen_ty_8,
	pub tag_directives: yaml_parser_s__bindgen_ty_9,
	pub aliases: yaml_parser_s__bindgen_ty_10,
	pub document: *mut yaml_document_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union yaml_parser_s__bindgen_ty_1 {
	pub string: yaml_parser_s__bindgen_ty_1__bindgen_ty_1,
	pub file: *mut FILE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_1__bindgen_ty_1 {
	pub start: *const ::std::os::raw::c_uchar,
	pub end: *const ::std::os::raw::c_uchar,
	pub current: *const ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_2 {
	pub start: *mut yaml_char_t,
	pub end: *mut yaml_char_t,
	pub pointer: *mut yaml_char_t,
	pub last: *mut yaml_char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_3 {
	pub start: *mut ::std::os::raw::c_uchar,
	pub end: *mut ::std::os::raw::c_uchar,
	pub pointer: *mut ::std::os::raw::c_uchar,
	pub last: *mut ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_4 {
	pub start: *mut yaml_token_t,
	pub end: *mut yaml_token_t,
	pub head: *mut yaml_token_t,
	pub tail: *mut yaml_token_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_5 {
	pub start: *mut ::std::os::raw::c_int,
	pub end: *mut ::std::os::raw::c_int,
	pub top: *mut ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_6 {
	pub start: *mut yaml_simple_key_t,
	pub end: *mut yaml_simple_key_t,
	pub top: *mut yaml_simple_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_7 {
	pub start: *mut yaml_parser_state_t,
	pub end: *mut yaml_parser_state_t,
	pub top: *mut yaml_parser_state_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_8 {
	pub start: *mut yaml_mark_t,
	pub end: *mut yaml_mark_t,
	pub top: *mut yaml_mark_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_9 {
	pub start: *mut yaml_tag_directive_t,
	pub end: *mut yaml_tag_directive_t,
	pub top: *mut yaml_tag_directive_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yaml_parser_s__bindgen_ty_10 {
	pub start: *mut yaml_alias_data_t,
	pub end: *mut yaml_alias_data_t,
	pub top: *mut yaml_alias_data_t,
}
pub type yaml_parser_t = yaml_parser_s;
extern "C" {
	pub fn yaml_parser_initialize(
		parser: *mut yaml_parser_t,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn yaml_parser_delete(parser: *mut yaml_parser_t);
}
extern "C" {
	pub fn yaml_parser_set_input_string(
		parser: *mut yaml_parser_t,
		input: *const ::std::os::raw::c_uchar,
		size: size_t,
	);
}
extern "C" {
	pub fn yaml_parser_set_input_file(
		parser: *mut yaml_parser_t,
		file: *mut FILE,
	);
}
extern "C" {
	pub fn yaml_parser_set_input(
		parser: *mut yaml_parser_t,
		handler: yaml_read_handler_t,
		data: *mut ::std::os::raw::c_void,
	);
}
extern "C" {
	pub fn yaml_parser_set_encoding(
		parser: *mut yaml_parser_t,
		encoding: yaml_encoding_t,
	);
}
extern "C" {
	pub fn yaml_parser_scan(
		parser: *mut yaml_parser_t,
		token: *mut yaml_token_t,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn yaml_parser_parse(
		parser: *mut yaml_parser_t,
		event: *mut yaml_event_t,
	) -> ::std::os::raw::c_int;
}
extern "C" {
	pub fn yaml_parser_load(
		parser: *mut yaml_parser_t,
		document: *mut yaml_document_t,
	) -> ::std::os::raw::c_int;
}
